>>>>>>>>>>CONTENT DIRECTORY<<<<<<<<<<<
_____________LOOPS________________

    -------------FOR------------------
    
    -------------WHILE----------------
    
_____________RANDOM_______________

_____________ARRAYS_______________

    ----------DEFINITION------------
    
    -------------USE----------------
    
_____________LISTS________________

    ----------DEFINITION------------
    
    -------------USE----------------
    ------------TYPES---------------
        _______MULTI-DIMENSIONAL________
        ____________JAGGED______________
    
_____________DICTIONARY_____________

    ----------DEFINITION------------
    
    -------------USE----------------
    


>>>>>>>>>>CONTENT DIRECTORY<<<<<<<<<<<
_____________LOOPS________________
  -------------FOR------------------
    // loop from 1 to 5 including 5
      for (int i = 1; i <= 5; i++)
      {
          Console.WriteLine(i);
      }
      // loop from 1 to 5 excluding 5
      for (int i = 1; i < 5; i++)
      {
          Console.WriteLine(i);
      }

    int start = 0;
    int end = 5;
    // loop from start to end including end
      for (int i = start; i <= end; i++)
      {
          Console.WriteLine(i);
      }
      // loop from start to end excluding end
      for (int i = start; i < end; i++)
      {
          Console.WriteLine(i);
      }

  -------------FOR------------------
  -------------WHILE----------------
    //The execution section does not always have to use ++
      for (int i = 1; i < 6; i = i + 1)
      {
          Console.WriteLine(i);
      }
    int i = 1;
    while (i < 6)
      {
          Console.WriteLine(i);
          i = i + 1;
      }

  -------------WHILE----------------
_____________LOOPS________________
_____________RANDOM_______________
Random rand = new Random();


Method	              Description
.Next()	              Will return a 32-bit signed integer that is greater than or equal to 0 and less than MaxValue (a C# constant)
.Next(Int32)        	Will return a 32-bit signed integer that is greater than or equal to 0 and less than the provided parameter
.Next(Int32, Int32)	  Will return a 32-bit signed integer that is greater than or equal to the first parameter and less than the second parameter
.NextDouble()	        Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.

Random rand = new Random();
for(int val = 0; val < 10; val++)
{
    //Prints the next random value between 2 and 7
    Console.WriteLine(rand.Next(2,8));
}
.Next(>=,<)
.Next(0,List.Count)
better than
.Next(>=,=<)
.Next(0,List.Count-1)
_____________RANDOM_______________
_____________ARRAYS_______________
  -------------DEFINITION----------------
    Arrays in C# are different than what JavaScript refers to as an "array"
    The key difference is that a true array is stored in blocks of memory, 
        that need to be predetermined
    While strict in construction, they are highly efficient for data retrieval,
        as the connected data are physically close to together in stored memory
  -------------DEFINITION----------------
// Declaring an array of length 5, initialized by default to all zeroes
  int[] numArray = new int[5];

// Declaring an array with pre-populated values
// For Arrays initialized this way, the length is determined by the size of the given data
  int[] numArray2 = {1,2,3,4,6};

int[] array3;
array3 = new int[] {1,3,5,7,9};
  -------------USE----------------
  int[] arrayOfInts = {1, 2, 3, 4, 5};
  Console.WriteLine(arrayOfInts[0]);    // The first number lives at index 0.
  Console.WriteLine(arrayOfInts[1]);    // The second number lives at index 1.
  Console.WriteLine(arrayOfInts[2]);    // The third number lives at index 2.
  Console.WriteLine(arrayOfInts[3]);    // The fourth number lives at index 3.
  Console.WriteLine(arrayOfInts[4]);    // The fifth and final number lives at index 4.

  string[] myCars = new string[] { "Mazda Miata", "Ford Model T", "Dodge Challenger", "Nissan 300zx"};
  // The 'Length' property tells us how many values are in the Array (4 in our example here). 
  // We can use this to determine where the loop ends: Length-1 is the index of the last value. 
  for (int idx = 0; idx < myCars.Length; idx++)
  {
      Console.WriteLine($"I own a {myCars[idx]}");
  }

  string[] myCars = new string[] { "Mazda Miata", "Ford Model T", "Dodge Challenger", "Nissan 300zx"}; 
  foreach (string car in myCars)
  {
      // We no longer need the index, because variable 'car' already represents each indexed value
      Console.WriteLine($"I own a {car}");
  }

  -------------USE----------------
    ------------TYPES---------------
      _______MULTI-DIMENSIONAL________
        // Multidimensional array declaration
        // This example contains 3 arrays -- each of these is length 2 -- all initialized to zeroes.
          int [,] array2D = new int[3,2];
        // This is equivalent to:
        //  int [,] array2D = new int[3,2]  {  { 0,0 }, { 0,0 }, { 0,0 } }; 
        // This example has 2 large rows that each contain 3 arrays -- and each of those arrays is length 4.
          int[,,] array3D = new int[2,3,4] 
              {
                  {  { 45,1,16,17 }, { 4,47,21,68 }, { 21,28,32,76 }  },
                  {  { 11,0,85,42 }, { 9,10,14,96 }, { 66,99,33,12 }  }
              };
        // Directly accessing a multidimensional array
          Console.WriteLine(array2D[0,1]);   // prints 0
          Console.WriteLine(array3D[1,0,3]); // prints 42
      _______MULTI-DIMENSIONAL________
      ____________JAGGED______________
        // Jagged array declaration
          int[][] jaggedArray = new int[3][];
          jaggedArray[0] = new int[5];
          jaggedArray[1] = new int[4]; 
          jaggedArray[2] = new int[2];
          int[][] jaggedArray2 = new int[][] {
              new int[] {1,3,5,7,9},
              new int[] {0,2},
              new int[] {11,22,33,44}
          };
        // Short-hand form
          int[][] jaggedArray3 = {
              new int[] {1,3,5,7,9},
              new int[] {0,2},
              new int[] {11,22,33,44}
          };
        // You can even mix jagged and multi-dimensional arrays
          int[][,] jaggedArray4 = new int[3][,] 
          {
              new int[,] { {1,3}, {5,7} },
              new int[,] { {0,2}, {4,6}, {8,10} },
              new int[,] { {11,22}, {99,88}, {0,9} } 
          };
        // Working through each array in a jagged array
          foreach(int[] innerArr in jaggedArray){
              Console.WriteLine("Inner array length is {0}", innerArr.Length);
          }
        // Accessing a jagged array
          Console.WriteLine(jaggedArray2[0][1]); // 3
          Console.WriteLine(jaggedArray3[2][3]); // 44
      ____________JAGGED______________
    ------------TYPES---------------
_____________ARRAYS_______________
_____________LISTS_______________
  -------------DEFINITION----------------
   Lists are a data type in C#, speciifically they are stored as a linked list in memory.
   They are indexable, like an array, but are stored differently in memory
   It is similar to a JavaScript "array"
   It is also similar to a Python "list"
  -------------DEFINITION----------------
using System.Collections.Generic;

.Count instead of .Length

//Initializing an empty list of Motorcycle Manufacturers
List<string> bikes = new List<string>();
//Use the Add function in a similar fashion to push
bikes.Add("Kawasaki");
bikes.Add("Triumph");
bikes.Add("BMW");
bikes.Add("Moto Guzzi");
bikes.Add("Harley Davidson");
bikes.Add("Suzuki");
//Accessing a generic list value is the same as you would an array
Console.WriteLine(bikes[2]); //Prints "BMW"
Console.WriteLine($"We currently know of {bikes.Count} motorcycle manufacturers.");
  -------------USE----------------
        //Using our array of motorcycle manufacturers from before
        //we can easily loop through the list of them with a C-style for loop
        //this time, however, Count is the attribute for a number of items.
        Console.WriteLine("The current manufacturers we have seen are:");
            for (var idx = 0; idx < bikes.Count; idx++)
            {
            Console.WriteLine("-" + bikes[idx]);
            }
        //Insert a new item between a specific index
             bikes.Insert(2, "Yamaha");
        //Removal from Generic List
        //Remove is a lot like Javascript array pop, but searches for a specified value
        //In this case we are removing all manufacturers located in Japan
            bikes.Remove("Suzuki");
            bikes.Remove("Yamaha");
            bikes.RemoveAt(0); //RemoveAt has no return value however
        //The updated list can then be iterated through using a foreach loop
            Console.WriteLine("List of Non-Japanese Manufacturers:");
            foreach (string manu in bikes)
            {
            Console.WriteLine("-" + manu);
            }
  -------------USE----------------
_____________LISTS_______________
_____________DICTIONARY__________
  -------------DEFINITION----------------
    Another Data type in C#, functions like a dictionary in Python
    Or Python 
    They use KEY, VALUE pairs rather than a number indece
  -------------DEFINITION----------------
Dictionary<string,string> profile = new Dictionary<string,string>();
//Almost all the methods that exists with Lists are the same with Dictionaries
profile.Add("Name", "Speros");
profile.Add("Language", "PHP");
profile.Add("Location", "Greece");
Console.WriteLine("Instructor Profile");
Console.WriteLine("Name - " + profile["Name"]);
Console.WriteLine("From - " + profile["Location"]);
Console.WriteLine("Favorite Language - " + profile["Language"]);
  -------------USE----------------
        foreach (KeyValuePair<string,string> entry in profile)
            {
            Console.WriteLine(entry.Key + " - " + entry.Value);
            }

    //The var keyword takes the place of a type in type-inference
        foreach (var entry in profile)
            {
            Console.WriteLine(entry.Key + " - " + entry.Value);
            }

  -------------USE----------------
_____________DICTIONARY__________