--------------REGISTRATION----------------
using System;
using System.ComponentModel.DataAnnotations;
    
public class User
{
    [Key]
    public int UserId {get;set;}
    public string FirstName {get;set;}
    public string LastName {get;set;}
    public string Email {get;set;}
    public string Password {get;set;}
    public DateTime CreatedAt {get;set;}
    public DateTime UpdatedAt {get;set;}
}
******************************************
One way we can resolve this, is by adding a [NotMapped] attribute to a Confirm property,
     which will tell EF to not attempt to map it!  
Let's see a fully implemented User class with this new property.
******************************************
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
    
public class User
{
    [Key]
    public int UserId {get;set;}
    [Required]
    public string FirstName {get;set;}
    [Required]
    public string LastName {get;set;}
    [EmailAddress]
    [Required]
    public string Email {get;set;}
    [DataType(DataType.Password)]
    [Required]
    [MinLength(8, ErrorMessage="Password must be 8 characters or longer!")]
    public string Password {get;set;}
    public DateTime CreatedAt {get;set;} = DateTime.Now;
    public DateTime UpdatedAt {get;set;} = DateTime.Now;
    // Will not be mapped to your users table!
    [NotMapped]
    [Compare("Password")]
    [DataType(DataType.Password)]
    public string Confirm {get;set;}
}    
******************************************
***************EMAIL**********************
[HttpPost("register")]
public IActionResult Register(User user)
{
    // Check initial ModelState
    if(ModelState.IsValid)
    {
        // If a User exists with provided email
        if(dbContext.Users.Any(u => u.Email == user.Email))
        {
            // Manually add a ModelState error to the Email field, with provided
            // error message
            ModelState.AddModelError("Email", "Email already in use!");
            
            // You may consider returning to the View at this point
        }
    }
    // other code
} 
******************************************
Handling Registration
******************************************
User.cs
************PASSWORD HASHING**************
public class User
{
    // Other fields
    public string Email {get; set;}
    public string Password { get; set; }
}
******************************************
YourController.cs
******************************************
using Microsoft.AspNetCore.Identity;
//Other using statements
namespace YourNamespace.Controllers
{
    public class YourController : Controller
    {
        //Route
        public IActionResult Method(User user)
        {
            if(ModelState.IsValid)
            {
                // Initializing a PasswordHasher object, providing our User class as its
                PasswordHasher<User> Hasher = new PasswordHasher<User>();
                user.Password = Hasher.HashPassword(user, user.Password);
                //Save your user object to the database
            }
        }
    }
}
******************************************
Handling Login
******************************************
LoginUser.cs
******************************************
public class LoginUser
{
    // No other fields!
    public string Email {get; set;}
    public string Password { get; set; }
}
******************************************
YourController.cs
******************************************
using Microsoft.AspNetCore.Identity;
//Other using statements
namespace YourNamespace.Controllers
{
    public IActionResult Login(LoginUser userSubmission)
    {
        if(ModelState.IsValid)
        {
            // If inital ModelState is valid, query for a user with provided email
            var userInDb = dbContext.Users.FirstOrDefault(u => u.Email == userSubmission.Email);
            // If no user exists with provided email
            if(userInDb == null)
            {
                // Add an error to ModelState and return to View!
                ModelState.AddModelError("Email", "Invalid Email/Password");
                return View("SomeView");
            }
            
            // Initialize hasher object
            var hasher = new PasswordHasher<LoginUser>();
            
            // verify provided password against hash stored in db
            var result = hasher.VerifyHashedPassword(userSubmission, userInDb.Password, userSubmission.Password);
            
            // result can be compared to 0 for failure
            if(result == 0)
            {
                // handle failure (this should be similar to how "existing email" is handled)
            }
        }
    }
}
******************************************
--------------REGISTRATION----------------